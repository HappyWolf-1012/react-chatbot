datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model OpenAIConfig {
  id           String @id @default(cuid())
  userId       String @unique
  globalAPIKey String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OpenAIFile {
  id           String   @id @default(cuid())
  fileId       String   @unique
  openAIFileId String   @unique
  createdAt    DateTime @default(now()) @map(name: "created_at")

  crawlerFile CrawlerFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Chatbot {
  id             String        @id @default(cuid())
  name           String
  userId         String
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  openaiKey      String
  modelId        String
  draft          Boolean
  prompt         String
  welcomeMessage String
  crawlerFile    CrawlerFile[]

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  model ChatbotModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map(name: "chatbots")
}

model ChatbotModel {
  id      String    @id @default(cuid())
  name    String
  Chatbot Chatbot[]

  @@map(name: "models")
}

model Crawler {
  id              String   @id @default(cuid())
  name            String
  createdAt       DateTime @default(now()) @map(name: "created_at")
  userId          String
  crawlUrl        String
  urlMatch        String
  selector        String
  maxPagesToCrawl Int

  crawlerFile CrawlerFile[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "crawlers")
}

model CrawlerFile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  name      String
  blobUrl   String
  crawlerId String

  crawler    Crawler      @relation(fields: [crawlerId], references: [id], onDelete: Cascade)
  Chatbot    Chatbot?     @relation(fields: [chatbotId], references: [id])
  chatbotId  String?
  OpenAIFile OpenAIFile[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Chatbot       Chatbot[]
  Crawler       Crawler[]
  OpenAIConfig  OpenAIConfig[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
