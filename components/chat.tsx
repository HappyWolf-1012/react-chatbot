'use client'
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/LOyl5Wee15h
 */

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar"
import { Chatbot } from "@prisma/client"
import * as z from "zod"

import { Icons } from "./icons"
import { zodResolver } from "@hookform/resolvers/zod"
import { messageSchema } from "@/lib/validations/message"
import { useForm } from "react-hook-form"
import { Form, FormField, FormItem, FormMessage } from "@/components/ui/form"
import { useEffect, useState } from "react"
import { Card, CardContent, CardFooter, CardHeader } from "./ui/card"
import { toast } from "./ui/use-toast"

interface ChatbotProps {
  chatbot: Pick<Chatbot, "id" | "name" | "welcomeMessage">
}

type FormData = z.infer<typeof messageSchema>

interface Messages {
  number: number
  message: string
  from: "user" | "bot"
}

export function Chat({ chatbot, ...props }: ChatbotProps) {
  const form = useForm<FormData>({
    resolver: zodResolver(messageSchema),
  })

  const [messages, setMessages] = useState<Messages[]>([])
  const [isLoading, setIsLoading] = useState<boolean>(false)

  async function onSubmit(data: FormData, e: any) {
    setIsLoading(true)

    setMessages(messages => [...messages, {
      number: messages.length + 1,
      message: data.message,
      from: "user",
    }])

    e.target.reset()

    const body = {
      message: data.message,
      chatbotId: chatbot.id,
    }

    const response = await fetch(`/api/chat`, {
      method: "POST",
      body: JSON.stringify(body),
    })

    if (!response?.ok) {
      if (response.status === 402) {
        setIsLoading(false)
        return toast({
          title: "Message limit reached.",
          description: "Please upgrade to higher plan to unlock unlimited messages.",
          variant: "destructive",
        })
      }
    }

    const botResponse = await response.json();

    setMessages(messages => [...messages, {
      number: messages.length + 1,
      message: botResponse.value,
      from: "bot",
    }])


    setIsLoading(false)
  }

  useEffect(() => {
    setMessages(
      [
        {
          number: 0,
          message: chatbot.welcomeMessage,
          from: "bot",
        }
      ]
    )
  }, [])

  return (
    <Card className="flex border flex-col w-full overflow-hidden">
      <CardHeader className="border-b p-4">
        <h2 className="text-xl font-bold flex items-center gap-2">
          <Avatar className="relative overflow-visible w-10 h-10">
            <span className="absolute right-0 top-0 flex h-3 w-3 rounded-full bg-green-600" />
            <AvatarImage alt="User Avatar" src="https://identicons.pgmichael.com/" />
            <AvatarFallback>U</AvatarFallback>
          </Avatar>
          <div>
            {chatbot.name}
            <span className="text-xs text-green-600 block">Online</span>
          </div>
        </h2>
      </CardHeader>
      <CardContent className="border-b overflow-auto p-4">
        <div className="space-y-4">
          {
            messages.map((message) => {
              if (message.from === "bot") {
                return (
                  <div key={message.number} className="flex items-end gap-2">
                    <div className="rounded-lg bg-zinc-200 p-2">
                      {message.message.replace(/\【\d+†source】/g, '') // Remove citation markers
                        .split('```').map((block, blockIdx) => {
                          // Check if the block is a code block or normal text
                          if (blockIdx % 2 === 1) {
                            // Render code block
                            return <pre key={blockIdx}><code>{block}</code></pre>;
                          } else {
                            // Process normal text for ** and \n
                            return block.split('\n').map((line, lineIndex, lineArray) => (
                              <p key={`${blockIdx}-${lineIndex}`} className={`text-sm ${lineIndex < lineArray.length - 1 ? 'mb-4' : ''}`}>
                                {line.split('**').map((segment, segmentIndex) => {
                                  // Render bold text for segments surrounded by **
                                  if (segmentIndex % 2 === 1) {
                                    return <strong key={segmentIndex}>{segment}</strong>;
                                  } else {
                                    // Render normal text for other segments
                                    return <span key={segmentIndex}>{segment}</span>;
                                  }
                                })}
                              </p>
                            ));
                          }
                        })}
                    </div>
                  </div>
                )
              } else {
                return (
                  <div key={message.number} className="flex items-end gap-2 justify-end">
                    <div className="rounded-lg bg-blue-500 text-white p-2">
                      <p className="text-sm">{message.message}</p>
                    </div>
                  </div>
                )
              }
            })
          }
        </div>
      </CardContent>
      <CardFooter className="p-4">
        <div
          className='w-full flex items-center gap-2'
        >
          <Form {...form}>
            <form
              onSubmit={form.handleSubmit(onSubmit)}
              className="flex align-right gap-2 w-full"
              {...props}
            >
              <div className="flex flex-grow">
                <FormField
                  control={form.control}
                  name="message"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      <Input
                        onChange={field.onChange}
                        className="w-full"
                        id="message"
                        placeholder="Type a message..." />
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <Button type="submit"
                disabled={isLoading}
                className="flex-none w-1/3"
              >
                {isLoading && (
                  <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                )}
                Send
              </Button>
            </form>
          </Form>
        </div>
      </CardFooter>
    </Card>
  )
}
